worker_processes  1;
error_log  logs/error.log  debug;
events {
    worker_connections  1024;
}

# Redisレートリミットモジュールをロード
load_module modules/libngx_ratelimit_redis.so;

http {
    # グローバル設定ファイルの指定
    ratelimit_redis_config /path/to/config.json;

    server {
        listen 8080;
        server_name localhost;

        # 方法1: 設定ファイルから設定を読み込む場合
        # すべてのLocationの設定はconfig.jsonから読み込まれます
        location / {
            # 設定ファイルで定義されたデフォルト設定または "/", キーに対応する設定が使用されます
            ratelimit_redis on;

            root html;
            index index.html index.htm;
        }

        location /api {
            # 設定ファイルの"/api"に対応する設定が使用されます
            ratelimit_redis on;

            # ハンドラ処理...
            return 200 "API Response";
        }

        location /fixed {
            # 設定ファイルの"/fixed"に対応する設定が使用されます
            ratelimit_redis on;

            # ハンドラ処理...
            return 200 "Fixed Window Algorithm";
        }

        # 方法2: 個別の設定ファイルを指定する場合
        location /custom {
            # 特定のLocationだけ別の設定ファイルを使用することも可能
            ratelimit_redis on config_file=/path/to/custom_config.json;

            # ハンドラ処理...
            return 200 "Custom Config";
        }

        # 方法3: 従来の方法（ディレクティブパラメータで直接設定）
        location /direct {
            # 直接パラメータで設定することもできます
            ratelimit_redis on redis_url=redis://127.0.0.1:6379 key=remote_addr rate=10 burst=5 algorithm=sliding_window window_size=60;

            # ハンドラ処理...
            return 200 "Direct Configuration";
        }

        # 方法4: Redis接続オプションをコマンドラインで指定
        location /redis-options {
            # Redis接続オプションを指定
            ratelimit_redis on redis_url=redis://127.0.0.1:6379
                key=remote_addr
                rate=10
                burst=5
                algorithm=sliding_window
                redis_connect_timeout=3000
                redis_command_timeout=1000
                redis_retry_count=5
                redis_retry_delay=300;

            # ハンドラ処理...
            return 200 "Redis Connection Options";
        }

        # 方法5: Redisクラスタを使用する設定
        location /redis-cluster {
            # Redisクラスタモードを有効にする
            ratelimit_redis on redis_url=redis://127.0.0.1:6379
                key=remote_addr
                rate=15
                burst=10
                redis_cluster_mode=on
                redis_connect_timeout=10000
                redis_retry_count=10;

            # ハンドラ処理...
            return 200 "Redis Cluster Mode";
        }

        # 方法6: Redis認証を使用する設定
        location /redis-auth {
            # Redis認証情報を指定
            ratelimit_redis on redis_url=redis://127.0.0.1:6379
                key=remote_addr
                rate=20
                burst=5
                redis_password=secret_password
                redis_database=2;

            # ハンドラ処理...
            return 200 "Redis Authentication";
        }

        # 方法7: TLS接続を使用する設定
        location /redis-tls {
            # Redis TLS接続を有効にする
            ratelimit_redis on redis_url=redis://127.0.0.1:6379
                key=remote_addr
                rate=15
                burst=5
                redis_tls=on;

            # ハンドラ処理...
            return 200 "Redis TLS Connection";
        }

        # 設定ファイルの設定を無効化
        location /override {
            # 設定ファイルがあっても、これは無効化されます
            ratelimit_redis off;

            # ハンドラ処理...
            return 200 "Rate Limiting Disabled";
        }
    }
}

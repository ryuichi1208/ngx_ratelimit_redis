name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  NGX_VERSION: 1.26.3

jobs:
  # Check formatting and linting
  check:
    name: Check code quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Check format
        run: cargo fmt --all -- --check

      - name: Clippy check
        run: cargo clippy -- -D warnings

  # Build and test on Ubuntu
  build-ubuntu:
    name: Build and test on Ubuntu
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libpcre3-dev zlib1g-dev libssl-dev curl pkg-config redis-server

      - name: Build
        run: cargo build --release
        env:
          NGX_VERSION: ${{ env.NGX_VERSION }}

      - name: Start Redis
        run: |
          sudo systemctl start redis-server
          redis-cli ping

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libngx_ratelimit_redis.so
          path: ./target/release/libngx_ratelimit_redis.so

  # Build and test with Docker
  docker-test:
    name: Docker build and test
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: ngx-ratelimit-redis:test
          build-args: |
            NGX_VERSION=${{ env.NGX_VERSION }}

      - name: Run Docker container
        run: |
          docker run -d --name ngx-redis-test -p 8080:8080 ngx-ratelimit-redis:test
          sleep 5  # Wait for container to start

      - name: Test container
        run: |
          curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/ || true
          docker logs ngx-redis-test

      - name: Run basic tests
        run: |
          chmod +x ./script/test_rate_limit.sh
          ./script/test_rate_limit.sh -n 10 -w 0.2 || true

  # Build and test on macOS
  build-macos:
    name: Build and test on macOS
    runs-on: macos-latest
    needs: check
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies
        run: |
          brew install pcre openssl@3 nginx redis
          brew services start redis

      - name: Build
        run: cargo build --release
        env:
          NGX_VERSION: ${{ env.NGX_VERSION }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libngx_ratelimit_redis.dylib
          path: ./target/release/libngx_ratelimit_redis.dylib

  # Create a release when tagged
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-macos, docker-test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: libngx_ratelimit_redis.so
          path: ./artifacts/linux

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: libngx_ratelimit_redis.dylib
          path: ./artifacts/macos

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/linux/libngx_ratelimit_redis.so
            ./artifacts/macos/libngx_ratelimit_redis.dylib
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
